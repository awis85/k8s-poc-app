// Jenkinsfile (using agent any and Jenkins Tools for Docker installation)

pipeline {
    agent any // This means Jenkins will pick any available agent
    // tools {
    //     // This will install/make available the 'docker' command on the agent
    //     // picked by 'agent any'. The name 'docker-latest' must match Global Tool Config.
    //     dockerTool 'docker-latest'
    // }
    environment {
        DOCKER_PATH = tool(name: 'docker-latest', type: 'org.jenkinsci.plugins.docker.commons.tools.DockerTool')
        SCRIPT_PATH = 'src/python'
        OUTPUT_LOG_FILE = 'poc_output.log'
        // DOCKER_PATH is not strictly needed as 'tools' adds it to PATH
    }
    stages {
        stage('Run Python POC Script') {
            steps {
                script {
                    sh "docker --version" // This should now work
                    echo "Docker CLI is available on this agent via Jenkins Tools."
                    echo "Using Docker CLI from: ${DOCKER_PATH}"
                    echo 'Starting Python POC script execution...'

                    sh "chmod +x $SCRIPT_PATH/poc_script.py"
                    
                    // If the 'agent any' is NOT a python:3.9-slim-buster,
                    // you might still need to docker run if Python isn't available.
                    // If the agent *is* a Python agent, you can run python3 directly.
                    // For simplicity, let's assume agent any has Python.
                    sh "docker run --rm -v \$(pwd):/app -w /app python:3.9-slim-buster python3 $SCRIPT_PATH/poc_script.py"
                    //sh "python3 $SCRIPT_PATH/poc_script.py"

                    echo 'Verifying output file content...'
                    sh "cat $OUTPUT_LOG_FILE"

                    echo 'Python POC script execution finished.'
                }
            }
        }
    }
    post {
        always {
            script {
                if (currentBuild.result == 'SUCCESS' || currentBuild.result == 'FAILURE') {
                    echo 'Cleaning up workspace...'
                    deleteDir()
                } else {
                    echo "Skipping workspace cleanup for build status: ${currentBuild.result}"
                }
            }
        }
        failure {
            echo 'Pipeline failed. Check logs for errors.'
        }
        success {
            echo 'Pipeline completed successfully.'
        }
    }
}